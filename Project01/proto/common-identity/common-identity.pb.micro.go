// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: common-identity.proto

package common_identity

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CommonIdentity service

func NewCommonIdentityEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CommonIdentity service

type CommonIdentityService interface {
	GeneratorIDCode16Req(ctx context.Context, in *StGeneratorIDCode16Req, opts ...client.CallOption) (*StGeneratorIDCode16Rsp, error)
	GeneratorIDCode32Req(ctx context.Context, in *StGeneratorIDCode32Req, opts ...client.CallOption) (*StGeneratorIDCode32Rsp, error)
}

type commonIdentityService struct {
	c    client.Client
	name string
}

func NewCommonIdentityService(name string, c client.Client) CommonIdentityService {
	return &commonIdentityService{
		c:    c,
		name: name,
	}
}

func (c *commonIdentityService) GeneratorIDCode16Req(ctx context.Context, in *StGeneratorIDCode16Req, opts ...client.CallOption) (*StGeneratorIDCode16Rsp, error) {
	req := c.c.NewRequest(c.name, "CommonIdentity.GeneratorIDCode16Req", in)
	out := new(StGeneratorIDCode16Rsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonIdentityService) GeneratorIDCode32Req(ctx context.Context, in *StGeneratorIDCode32Req, opts ...client.CallOption) (*StGeneratorIDCode32Rsp, error) {
	req := c.c.NewRequest(c.name, "CommonIdentity.GeneratorIDCode32Req", in)
	out := new(StGeneratorIDCode32Rsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CommonIdentity service

type CommonIdentityHandler interface {
	GeneratorIDCode16Req(context.Context, *StGeneratorIDCode16Req, *StGeneratorIDCode16Rsp) error
	GeneratorIDCode32Req(context.Context, *StGeneratorIDCode32Req, *StGeneratorIDCode32Rsp) error
}

func RegisterCommonIdentityHandler(s server.Server, hdlr CommonIdentityHandler, opts ...server.HandlerOption) error {
	type commonIdentity interface {
		GeneratorIDCode16Req(ctx context.Context, in *StGeneratorIDCode16Req, out *StGeneratorIDCode16Rsp) error
		GeneratorIDCode32Req(ctx context.Context, in *StGeneratorIDCode32Req, out *StGeneratorIDCode32Rsp) error
	}
	type CommonIdentity struct {
		commonIdentity
	}
	h := &commonIdentityHandler{hdlr}
	return s.Handle(s.NewHandler(&CommonIdentity{h}, opts...))
}

type commonIdentityHandler struct {
	CommonIdentityHandler
}

func (h *commonIdentityHandler) GeneratorIDCode16Req(ctx context.Context, in *StGeneratorIDCode16Req, out *StGeneratorIDCode16Rsp) error {
	return h.CommonIdentityHandler.GeneratorIDCode16Req(ctx, in, out)
}

func (h *commonIdentityHandler) GeneratorIDCode32Req(ctx context.Context, in *StGeneratorIDCode32Req, out *StGeneratorIDCode32Rsp) error {
	return h.CommonIdentityHandler.GeneratorIDCode32Req(ctx, in, out)
}
